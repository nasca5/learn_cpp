#include <iostream>

int strlen(const char *str)
{
  int i = 0;
  while (str[i] != '\0')
  {
    i++;
  }
  return i;
}

class MyString
{
private:
  char *string_content; // ptr pointing string data
  int string_length;    // length of string
  int memory_capacity;  // size of string_content

public:
  // generate only a word
  MyString(char c);

  // generated by string
  MyString(const char *str);

  // generated by copy instructor
  MyString(const MyString &str);

  // destructor
  ~MyString();

  // return length of string
  int length() const;

  // assign string
  MyString &assign(const char *str);

  MyString &assign(const MyString &str);

  // print string without ln
  void print() const;

  // printf string with ln
  void println() const;
};

MyString::MyString(char c) : string_length(1), memory_capacity(1)
{
  string_content = new char[1];
  string_content[0] = c;
}
MyString::MyString(const char *str) : string_length(strlen(str)), memory_capacity(strlen(str))
{
  string_content = new char[string_length];
  for (int i = 0; i < string_length; i++)
  {
    string_content[i] = str[i];
  }
}
MyString::MyString(const MyString &str) : string_length(string_length), memory_capacity(memory_capacity)
{
  string_content = new char[string_length];
  for (int i = 0; i < string_length; i++)
  {
    string_content[i] = str.string_content[i];
  }
}
MyString::~MyString()
{
  if (string_content)
  {
    delete[] string_content;
  }
}
int MyString::length() const
{
  return string_length;
}
MyString &MyString::assign(const char *str)
{
  int str_length = strlen(str);
  if (str_length > memory_capacity)
  {
    delete[] string_content;
    string_content = new char[str_length];
    memory_capacity = str_length;
  }
  for (int i = 0; i < str_length; i++)
  {
    string_content[i] = str[i];
  }
  string_length = str_length;
  return *this;
}
// end 23/06/01
MyString &MyString::assign(const MyString &str)
{
  if (str.length() > string_length)
  {
    delete[] string_content;
    string_content = new char[str.length()];
    memory_capacity = str.length();
  }
  for (int i = 0; i < str.length(); i++)
  {
    string_content[i] = str.string_content[i];
  }
  string_length = str.length();
  return *this;
}
void MyString::print() const
{
  for (int i = 0; i < string_length; i++)
  {
    std::cout << string_content[i];
  }
}
void MyString::println() const
{
  for (int i = 0; i < string_length; i++)
  {
    std::cout << string_content[i];
  }
  std::cout << std::endl;
}

int main()
{
  MyString str1("Hello world!");
  MyString str2(str1);

  str2.println();
  str1.print();
  return 0;
}
