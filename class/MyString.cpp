#include <iostream>

// info of MyString class
// instructor : from char c / from char* str / from MyString& str
// member func
// length() : return length of obj
// at(idx) : return string_content[idx] of obj
// assign(str) : alternate string_content to str
// capacity() : return memory_capacity of obj
// reserve(size) : assign memory_capacity of size
// insert(idx, str) : insert str before string_content[idx] of obj
// pritnln() : print string_content of obj with ln
// pritn() : print string_content of obj without ln

int strlen(const char *str)
{
  int i = 0;
  while (str[i] != '\0')
  {
    i++;
  }
  return i;
}

class MyString
{
private:
  char *string_content; // ptr pointing string data
  int string_length;    // length of string
  int memory_capacity;  // size of string_content

public:
  // assign capacity
  explicit MyString(int capacity);

  // generate only a word
  MyString(char c);

  // generated by string
  MyString(const char *str);

  // generated by copy instructor
  MyString(const MyString &str);

  // destructor
  ~MyString();

  // return length of string
  int length() const;

  // assign string
  MyString &assign(const char *str);

  MyString &assign(const MyString &str);

  int capacity() const;

  void reserve(int size);

  MyString &insert(int idx, const MyString &str);

  MyString &insert(int idx, const char *str);

  MyString &insert(int idx, const char c);

  MyString &erase(int idx, int num);

  int find(int idx, const MyString &str) const;

  int find(int idx, const char *str) const;

  int find(int idx, const char c) const;

  int compare(const MyString &str) const;

  bool operator==(MyString &str);

  char at(int idx) const;

  // print string without ln
  void print() const;
  // printf string with ln
  void println() const;
};

MyString::MyString(int capacity)
{
  memory_capacity = capacity;
  string_content = new char[memory_capacity];
  string_length = 0;
  std::cout << "Capacity : " << memory_capacity << std::endl;
}

MyString::MyString(char c) : string_length(1), memory_capacity(1)
{
  string_content = new char[1];
  string_content[0] = c;
}

MyString::MyString(const char *str) : string_length(strlen(str)), memory_capacity(strlen(str))
{
  string_content = new char[string_length];
  for (int i = 0; i < string_length; i++)
  {
    string_content[i] = str[i];
  }
}

MyString::MyString(const MyString &str) : string_length(str.string_length), memory_capacity(str.string_length)
{
  string_content = new char[string_length];
  for (int i = 0; i < string_length; i++)
  {
    string_content[i] = str.string_content[i];
  }
}

MyString::~MyString()
{
  if (string_content)
  {
    delete[] string_content;
  }
}
int MyString::length() const
{
  return string_length;
}
MyString &MyString::assign(const char *str)
{
  int str_length = strlen(str);
  if (str_length > memory_capacity)
  {
    delete[] string_content;
    string_content = new char[str_length];
    memory_capacity = str_length;
  }
  for (int i = 0; i < str_length; i++)
  {
    string_content[i] = str[i];
  }
  string_length = str_length;
  return *this;
}
// end 23/06/01
MyString &MyString::assign(const MyString &str)
{
  if (str.length() > string_length)
  {
    delete[] string_content;
    string_content = new char[str.length()];
    memory_capacity = str.length();
  }
  for (int i = 0; i < str.length(); i++)
  {
    string_content[i] = str.string_content[i];
  }
  string_length = str.length();
  return *this;
}

int MyString::capacity() const
{
  return memory_capacity;
}

void MyString::reserve(int size)
{
  if (size > memory_capacity)
  {
    char *ptr = string_content;
    string_content = new char[size];
    memory_capacity = size;
    for (int i = 0; i < string_length; i++)
    {
      string_content[i] = ptr[i];
    }
    delete[] ptr;
  }
}

MyString &MyString::insert(int idx, const MyString &str)
{
  int i;
  if (idx >= string_length || idx < 0)
  {
    return *this;
  }
  if (string_length + str.string_length > memory_capacity)
  {
    if (memory_capacity * 2 > string_length + str.string_length)
    {
      memory_capacity *= 2;
    }
    else
    {
      memory_capacity = string_length + str.string_length;
    }
    char *ptr = string_content;
    string_content = new char[memory_capacity];

    for (i = 0; i < string_length; i++)
    {
      string_content[i] = ptr[i];
    }
    delete[] ptr;
  }

  for (i = string_length - 1; i >= idx; i--)
  {
    string_content[i + str.string_length] = string_content[i];
  }

  for (i += 1; i < idx + str.string_length; i++)
  {
    string_content[i] = str.string_content[i - idx];
  }
  string_length += str.string_length;

  return *this;
}

MyString &MyString::insert(int idx, const char *str)
{
  MyString temp = str;

  return insert(idx, temp);
}

MyString &MyString::insert(int idx, const char c)
{
  MyString temp = c;

  return insert(idx, temp);
}

char MyString::at(int idx) const
{
  if (idx >= string_length || idx < 0)
  {
    return '\0';
  }
  else
  {
    return string_content[idx];
  }
}

MyString &MyString::erase(int idx, int num)
{
  if (num <= 0 || idx < 0 || idx > string_length || idx + num >= memory_capacity)
  {
    return *this;
  }

  else if (num > string_length - idx)
  {
    string_length = idx;
    return *this;
  }
  for (int i = idx + num; i < string_length; i++)
  {
    string_content[i - num] = string_content[i];
  }
  string_length -= num;
  return *this;
}

int MyString::find(int idx, const MyString &str) const
{
  int i, j;
  if (str.string_length == 0)
  {
    return -1;
  }
  for (i = idx; i <= string_length - str.string_length; i++)
  {
    for (j = 0; j < str.string_length; j++)
    {
      if (string_content[i + j] != str.string_content[j])
      {
        break;
      }
    }

    if (j == str.string_length)
    {
      return i;
    }
  }

  return -1;
}

int MyString::find(int idx, const char *str) const
{
  MyString temp(str);

  return find(idx, temp);
}

int MyString::find(int idx, const char c) const
{
  MyString temp(c);

  return find(idx, temp);
}

int MyString::compare(const MyString &str) const
{
  int min = std::min(string_length, str.string_length);
  int i;

  if (str.length() == 0)
  {
    return 1;
  }

  for (i = 0; i < min; i++)
  {
    if (string_content[i] > str.string_content[i])
    {
      return 1;
    }

    else if (string_content[i] < str.string_content[i])
    {
      return -1;
    }
  }

  if (string_length == str.string_length)
  {
    return 0;
  }

  else if (string_length > str.string_length)
  {
    return 1;
  }

  return -1;
}

bool MyString::operator==(MyString &str)
{
  return !compare(str);
}

void MyString::print() const
{
  for (int i = 0; i < string_length; i++)
  {
    std::cout << string_content[i];
  }
}
void MyString::println() const
{
  for (int i = 0; i < string_length; i++)
  {
    std::cout << string_content[i];
  }
  std::cout << std::endl;
}

int main()
{
  MyString str1 = "a word";
  MyString str2 = "sentence";
  MyString str3(str2);

  if (str1 == str2)
  {
    std::cout << "str1, str2 are same" << std::endl;
  }
  else
  {
    std::cout << "str1, str2 are different" << std::endl;
  }

  if (str2 == str3)
  {
    std::cout << "str2, str3 are same" << std::endl;
  }
  else
  {
    std::cout << "str2, str3 are different" << std::endl;
  }
  // MyString(3);
  // MyString str1("this is a very very long string");
  // std::cout << "Location of first <very> in the string : " << str1.find(0, "very") << std::endl;
  // std::cout << "Location of second <very> in the string : " << str1.find(str1.find(0, "very") + 1, "very") << std::endl;
  // std::cout << "Location of e in the string : " << str1.find(0, 'e') << std::endl;

  // MyString str1("very long string");
  // MyString str2("<some string inserted between>");
  // str1.reserve(30);
  // std::cout << "Capacity : " << str1.capacity() << std::endl;
  // std::cout << "String length : " << str1.length() << std::endl;
  // str1.println();
  // str1.insert(5, str2);
  // str1.println();
  // std::cout << "Capacity : " << str1.capacity() << std::endl;
  // std::cout << "String length : " << str1.length() << std::endl;
  // str1.println();

  // MyString str3("abcd");
  // str3.erase(1, 2);
  // str3.println();

  // MyString str1("Hello world!");
  // MyString str2(str1);
  // MyString str3("sibal...");

  // str2.assign(str3);

  // str1.reserve(30);

  // std::cout << str1.capacity() << std::endl;
  // std::cout << str1.length() << std::endl;
  // std::cout << str1.at(1) << std::endl;
  // std::cout << str2.capacity() << std::endl;
  // std::cout << str2.length() << std::endl;
  // std::cout << str2.at(1) << std::endl; // str2.insert(2, str1); MyString str4("abc"); str4.insert(1, 'b');

  // MyString str4(str3);
  // str1.insert(2, str4);

  // MyString str5(str1.at(1));
  // str3.insert(3, str5);
  // str1.println();
  // str4.println();
  // str3.println();
  // 30, 12, e, 12, 8, i
  // Hesibal...llo world!
  // sibal...
  // std::cout << str4.capacity() << std::endl;
  // std::cout << str4.length() << std::endl;
  // 8, 8
  // std::cout << str1.capacity() << std::endl;
  // std::cout << str1.length() << std::endl;
  // 30, 20

  return 0;
}
